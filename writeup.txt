For the form, I just went with a simple POST method form with a search box and a search button. 
The page checks to see if the user has searched yet. Once the user searches an instance of a database class and an instance of a user class will be created. The Database class and User class are just two simple classes that contain the host, port, and database name and username, and password, respectively. 
Following the search, the php script tries to make a connection to the database using the PDO interface. I’ve prepared to functions reverseString and getSearchStrings that takes the user’s search and returns an array of usable search strings and reversed strings. If the user searches: JaMEs HarDen, then in the SQL query will search for “JAMES HARDEN” and “HARDEN JAMES” to make casing or order insignificant. 
If results(at least one) are found then the function showDBHead prints out the headers (Name, Team, etc.) in the table in preparation for the actual player data. The function showPlayerInfo takes whichever player data is returned by the query and creates table cells for each stat per player.
Embedded in showPlayerInfo is getPlayerHeadshots which takes advantage of a NBA Player headshot API that searches for players based on their name to grab a headshot image.
If no results are passed through the query then there will be a message that says so on screen and if the connection fails to connect with the database an error message will be displayed.
For the csv file, I edited a couple of headers for ease of use. There were previously a few nested headers but I simple combined them to create FGM, FGA, FGPct, 3PTM, 3PTA, 3PTPct, etc.. instead of FG [M, A, Pct] etc..